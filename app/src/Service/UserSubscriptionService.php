<?php


namespace App\Service;


use App\DTO\FondyPaymentDTO;
use App\DTO\NewSubscriptionRequestDTO;
use App\DTO\NewUserSubscriptionDTO;
use App\Entity\SubscriptionUser;
use App\Entity\User;
use App\Repository\SubscriptionTypeRepository;
use App\Repository\SubscriptionUserRepository;
use App\Repository\UserRepository;
use App\Service\Factory\UserSubscriptionsCreator;
use Doctrine\ORM\EntityManagerInterface;

class UserSubscriptionService
{
    /**
     * @var SubscriptionUserRepository
     */
    private SubscriptionUserRepository $usersSubscriptions;
    /**
     * @var EntityManagerInterface
     */
    private EntityManagerInterface $entityManager;
    /**
     * @var SubscriptionTypeRepository
     */
    private SubscriptionTypeRepository $subscriptionPlans;
    /**
     * @var UserSubscriptionsCreator
     */
    private UserSubscriptionsCreator $userSubscriptionsManager;
    /**
     * @var UserRepository
     */
    private UserRepository $users;

    /**
     * UserSubscriptionService constructor.
     *
     * @param SubscriptionUserRepository $subscriptionUserRepository
     * @param EntityManagerInterface     $entityManager
     * @param SubscriptionTypeRepository $subscriptionTypeRepository
     * @param UserSubscriptionsCreator   $userSubscriptionsManager
     * @param UserRepository             $userRepository
     */
    public function __construct(
        SubscriptionUserRepository $subscriptionUserRepository,
        EntityManagerInterface $entityManager,
        SubscriptionTypeRepository $subscriptionTypeRepository,
        UserSubscriptionsCreator $userSubscriptionsManager,
        UserRepository $userRepository
    ) {
        $this->usersSubscriptions = $subscriptionUserRepository;
        $this->entityManager = $entityManager;
        $this->subscriptionPlans = $subscriptionTypeRepository;
        $this->userSubscriptionsManager = $userSubscriptionsManager;
        $this->users = $userRepository;
    }

    public function create(NewSubscriptionRequestDTO $requestDTO) {
        $newSubscriptionUser = $this->userSubscriptionsManager->createForUser(
            $requestDTO->user,
            $this->subscriptionPlans->findOneBy(['id' => $requestDTO->subscription_id])
        );
        //TODO send data to payment service like FONDY @see https://docs.fondy.eu/en/docs/page/3/#chapter-2
        // order_id	string(1024)	Order ID which is generated by merchant.
        $this->entityManager->persist($newSubscriptionUser);
        $this->entityManager->flush();
    }

    public function payUserSubscription(FondyPaymentDTO $paymentDTO) {
        //TODO validate order data
        if (!$paymentDTO->order_status){
            return false;
        }
        $newSubscription = $this->getNewUserSubscriptionByOrderId($paymentDTO->order_id);
        if ($this->usersSubscriptions->count(['user' => $newSubscription->user, 'active' => true])){
            $this->deactivateAllUsersPlans($newSubscription->user);
        }
        $newUserSubscription = $this->userSubscriptionsManager->createForUser(
            $newSubscription->user,
            $newSubscription->subscription
        );
        $this->entityManager->persist($newUserSubscription);
        $this->entityManager->flush();

        return true;
    }

    private function getNewUserSubscriptionByOrderId(string $orderId) {
        //TODO resolve order id user_id|subscription_id and get correct data
        $newUserSubscription = new NewUserSubscriptionDTO();
        $newUserSubscription->user = current($this->users->findAll());
        $newUserSubscription->subscription = current($this->subscriptionPlans->findAll());

        return $newUserSubscription;
    }

    private function deactivateAllUsersPlans(User $user){
        array_map(function (SubscriptionUser $subscriptionUser){
            $subscriptionUser->deactivate();
            $this->entityManager->persist($subscriptionUser);
        },$this->usersSubscriptions->findBy(['user' => $user]));
    }
}
